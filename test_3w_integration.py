#!/usr/bin/env python3
"""
Script de teste para a integra√ß√£o com o Dataset 3W da Petrobras.

Este script verifica se todos os m√≥dulos da integra√ß√£o est√£o funcionando
corretamente e testa as funcionalidades principais.
"""

import logging
import sys

# Configura logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


def test_imports():
    """Testa se todos os m√≥dulos podem ser importados."""
    print("üß™ Testando imports...")

    try:
        # Testa m√≥dulos principais
        from src.data.threew_dataset import ThreeWDataset

        # Testa se a classe pode ser instanciada (quando dispon√≠vel)
        try:
            ThreeWDataset()
            print("‚úÖ Dataset 3W dispon√≠vel e funcional")
        except ImportError:
            print("‚ö†Ô∏è Dataset 3W n√£o dispon√≠vel, mas m√≥dulo importado com sucesso")

        print("‚úÖ Todos os m√≥dulos importados com sucesso")
        return True

    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        return False


def test_threew_availability():
    """Testa se o dataset 3W est√° dispon√≠vel."""
    print("\nüìä Testando disponibilidade do dataset 3W...")

    try:
        from src.data.threew_dataset import get_threew_info, is_threew_available

        if is_threew_available():
            info = get_threew_info()
            print(f"‚úÖ Dataset 3W dispon√≠vel - Vers√£o: {info.get('version', 'N/A')}")
            print(f"   Dataset path: {info.get('dataset_path', 'N/A')}")
            print(f"   Folds path: {info.get('folds_path', 'N/A')}")
            return True
        else:
            print("‚ö†Ô∏è Dataset 3W n√£o dispon√≠vel")
            print(
                "   Para usar, clone o reposit√≥rio: git clone https://github.com/petrobras/3W.git"
            )
            return False

    except Exception as e:
        print(f"‚ùå Erro ao verificar disponibilidade: {e}")
        return False


def test_config_system():
    """Testa o sistema de configura√ß√£o."""
    print("\n‚öôÔ∏è Testando sistema de configura√ß√£o...")

    try:
        from src.config.threew_config import get_threew_dataset_config

        config = get_threew_dataset_config()

        # Verifica se as configura√ß√µes principais est√£o presentes
        required_keys = ["dataset", "problems", "loading", "preprocessing"]
        for key in required_keys:
            if key in config:
                print(f"‚úÖ Configura√ß√£o '{key}' encontrada")
            else:
                print(f"‚ùå Configura√ß√£o '{key}' n√£o encontrada")
                return False

        print(
            f"‚úÖ Sistema de configura√ß√£o funcionando - {len(config.get('problems', []))} problemas configurados"
        )
        return True

    except Exception as e:
        print(f"‚ùå Erro no sistema de configura√ß√£o: {e}")
        return False


def test_data_loader():
    """Testa o carregador de dados."""
    print("\nüìä Testando carregador de dados...")

    try:
        from src.data.data_loader import create_data_loader

        # Cria carregador
        loader = create_data_loader(use_threew=True, cache_data=True)

        # Verifica informa√ß√µes
        info = loader.get_data_info()
        print(
            f"‚úÖ Carregador criado - 3W: {info['use_threew']}, Cache: {info['cache_enabled']}"
        )

        # Lista problemas dispon√≠veis
        problems = loader.list_available_problems()
        print(f"‚úÖ Problemas dispon√≠veis: {problems}")

        return True

    except Exception as e:
        print(f"‚ùå Erro no carregador de dados: {e}")
        return False


def test_preprocessing():
    """Testa o sistema de pr√©-processamento."""
    print("\nüßπ Testando sistema de pr√©-processamento...")

    try:
        import numpy as np

        from src.data.preprocessing import create_preprocessor

        # Cria dados de teste
        X_test = np.random.randn(100, 10)
        y_test = np.random.randint(0, 2, 100)

        # Cria pr√©-processador
        preprocessor = create_preprocessor(
            imputation_strategy="mean",
            scaling_method="robust",
            feature_selection_method="mutual_info",
            n_features=5,
            pca_components=3,
        )

        # Testa fit_transform
        X_processed = preprocessor.fit_transform(X_test, y_test)

        print(
            f"‚úÖ Pr√©-processamento funcionando - Forma original: {X_test.shape}, Processado: {X_processed.shape}"
        )

        # Verifica informa√ß√µes
        info = preprocessor.get_preprocessing_info()
        print(f"   Imputer: {info['has_imputer']}, Scaler: {info['has_scaler']}")
        print(
            f"   Feature Selector: {info['has_feature_selector']}, PCA: {info['has_pca']}"
        )

        return True

    except Exception as e:
        print(f"‚ùå Erro no pr√©-processamento: {e}")
        return False


def test_rolling_window():
    """Testa o sistema de janelas deslizantes."""
    print("\nü™ü Testando sistema de janelas deslizantes...")

    try:
        import numpy as np

        from src.data.preprocessing import create_rolling_window_preprocessor

        # Cria dados de teste
        X_test = np.random.randn(1000, 5)

        # Cria pr√©-processador de janelas
        window_preprocessor = create_rolling_window_preprocessor(
            window_size=100, step_size=1, padding="same"
        )

        # Cria janelas
        X_windows, _ = window_preprocessor.create_windows(X_test)

        print(
            f"‚úÖ Janelas deslizantes funcionando - Forma original: {X_test.shape}, Janelas: {X_windows.shape}"
        )

        # Testa achatamento
        X_flat = window_preprocessor.flatten_windows(X_windows)
        print(f"   Janelas achatadas: {X_flat.shape}")

        return True

    except Exception as e:
        print(f"‚ùå Erro nas janelas deslizantes: {e}")
        return False


def test_full_pipeline():
    """Testa o pipeline completo (se o 3W estiver dispon√≠vel)."""
    print("\nüöÄ Testando pipeline completo...")

    try:
        from src.data.threew_dataset import is_threew_available

        if not is_threew_available():
            print("‚ö†Ô∏è Dataset 3W n√£o dispon√≠vel - pulando teste do pipeline")
            return True

        from src.data.data_loader import create_data_loader

        # Cria carregador
        loader = create_data_loader(use_threew=True, cache_data=True)

        # Lista problemas
        problems = loader.list_available_problems()
        if not problems:
            print("‚ö†Ô∏è Nenhum problema dispon√≠vel - pulando teste do pipeline")
            return True

        print(f"‚úÖ Pipeline testado - {len(problems)} problemas dispon√≠veis")
        return True

    except Exception as e:
        print(f"‚ùå Erro no pipeline completo: {e}")
        return False


def main():
    """Fun√ß√£o principal de teste."""
    print("üõ¢Ô∏è Teste da Integra√ß√£o com Dataset 3W da Petrobras")
    print("=" * 60)

    # Lista de testes
    tests = [
        ("Imports", test_imports),
        ("Disponibilidade 3W", test_threew_availability),
        ("Sistema de Configura√ß√£o", test_config_system),
        ("Carregador de Dados", test_data_loader),
        ("Pr√©-processamento", test_preprocessing),
        ("Janelas Deslizantes", test_rolling_window),
        ("Pipeline Completo", test_full_pipeline),
    ]

    # Executa testes
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro inesperado em {test_name}: {e}")
            results.append((test_name, False))

    # Resumo dos resultados
    print("\n" + "=" * 60)
    print("üìã RESUMO DOS TESTES")
    print("=" * 60)

    passed = 0
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:.<30} {status}")
        if result:
            passed += 1

    print("-" * 60)
    print(f"Total: {total}, Passou: {passed}, Falhou: {total - passed}")

    if passed == total:
        print(
            "\nüéâ Todos os testes passaram! A integra√ß√£o 3W est√° funcionando perfeitamente."
        )
        print("üìö Consulte a documenta√ß√£o em: docs/3W_INTEGRATION.md")
        print(
            "üöÄ Execute o notebook de exemplo: marimo edit notebooks/3W_integration_example.py"
        )
    else:
        print(f"\n‚ö†Ô∏è {total - passed} teste(s) falharam. Verifique os logs acima.")
        print("üîß Execute o script de setup: ./scripts/setup_3w_integration.sh")

    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
