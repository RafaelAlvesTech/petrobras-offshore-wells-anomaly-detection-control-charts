"""
üîç GCP EDA (Exploratory Data Analysis) Example
===============================================

Este notebook demonstra como fazer EDA no Google Cloud Platform usando:
- Google Cloud Storage para dados
- BigQuery para consultas SQL
- Vertex AI para notebooks
- Polars para manipula√ß√£o de dados
- Marimo para interface interativa

Autor: Rafael Alves
Projeto: Petrobras Offshore Wells Anomaly Detection
"""

import mo
import polars as pl
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import os
import sys

# Adicionar src ao path para importar m√≥dulos do projeto
sys.path.append("src")

# Configura√ß√µes do GCP
GCP_PROJECT_ID = os.getenv("GCP_PROJECT_ID", "your-project-id")
GCP_REGION = os.getenv("GCP_REGION", "us-central1")
GCS_BUCKET = os.getenv("GCS_BUCKET", "your-bucket-name")

# Configurar estilo dos gr√°ficos
plt.style.use("seaborn-v0_8")
sns.set_palette("husl")

# ============================================================================
# üîß CONFIGURA√á√ÉO DO GCP
# ============================================================================


def setup_gcp_connection():
    """Configura conex√£o com Google Cloud Platform"""
    try:
        from google.auth import default

        # Autentica√ß√£o autom√°tica
        credentials, project = default()

        if project:
            print(f"‚úÖ Conectado ao projeto GCP: {project}")
            return True
        else:
            print("‚ùå Falha na autentica√ß√£o GCP")
            return False

    except ImportError:
        print(
            "‚ùå Bibliotecas GCP n√£o instaladas. Execute: pip install google-cloud-storage google-cloud-bigquery"
        )
        return False
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o GCP: {e}")
        return False


# ============================================================================
# üìä FUN√á√ïES DE EDA
# ============================================================================


def load_sample_data():
    """Carrega dados de exemplo para demonstra√ß√£o"""
    # Dados simulados de po√ßos offshore
    np.random.seed(42)
    n_samples = 1000

    data = {
        "timestamp": pl.date_range(
            start=datetime(2023, 1, 1),
            end=datetime(2023, 12, 31),
            interval="1h",
            eager=True,
        )[:n_samples],
        "well_id": np.random.choice(["WELL_001", "WELL_002", "WELL_003"], n_samples),
        "pressure": np.random.normal(150, 20, n_samples),
        "temperature": np.random.normal(85, 10, n_samples),
        "flow_rate": np.random.normal(1000, 200, n_samples),
        "vibration": np.random.normal(0.5, 0.1, n_samples),
        "oil_content": np.random.normal(0.8, 0.05, n_samples),
        "water_content": np.random.normal(0.15, 0.03, n_samples),
        "gas_content": np.random.normal(0.05, 0.02, n_samples),
    }

    # Adicionar algumas anomalias
    anomaly_indices = np.random.choice(n_samples, size=50, replace=False)
    data["pressure"][anomaly_indices] += np.random.normal(50, 10, 50)
    data["temperature"][anomaly_indices] += np.random.normal(15, 5, 50)

    return pl.DataFrame(data)


def basic_eda(df):
    """An√°lise explorat√≥ria b√°sica dos dados"""
    print("üîç AN√ÅLISE EXPLORAT√ìRIA B√ÅSICA")
    print("=" * 50)

    # Informa√ß√µes b√°sicas
    print(f"üìä Dimens√µes: {df.shape}")
    print(f"üìÖ Per√≠odo: {df['timestamp'].min()} a {df['timestamp'].max()}")
    print(f"üï≥Ô∏è  Po√ßos √∫nicos: {df['well_id'].n_unique()}")

    # Estat√≠sticas descritivas
    print("\nüìà ESTAT√çSTICAS DESCRITIVAS:")
    print(df.describe())

    # Valores √∫nicos
    print(f"\nüè∑Ô∏è  PO√áOS: {df['well_id'].unique().to_list()}")

    return df


def time_series_analysis(df):
    """An√°lise de s√©ries temporais"""
    print("\n‚è∞ AN√ÅLISE DE S√âRIES TEMPORAIS")
    print("=" * 50)

    # Agrega√ß√£o por hora
    hourly_stats = (
        df.group_by(pl.col("timestamp").dt.hour().alias("hour"))
        .agg(
            [
                pl.col("pressure").mean().alias("avg_pressure"),
                pl.col("temperature").mean().alias("avg_temperature"),
                pl.col("flow_rate").mean().alias("avg_flow_rate"),
            ]
        )
        .sort("hour")
    )

    print("üìä M√âDIAS POR HORA DO DIA:")
    print(hourly_stats)

    return hourly_stats


def anomaly_detection(df):
    """Detec√ß√£o b√°sica de anomalias usando estat√≠sticas"""
    print("\nüö® DETEC√á√ÉO DE ANOMALIAS")
    print("=" * 50)

    # Calcular limites para detec√ß√£o de outliers
    numeric_cols = ["pressure", "temperature", "flow_rate", "vibration"]

    for col in numeric_cols:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1

        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR

        outliers = df.filter((pl.col(col) < lower_bound) | (pl.col(col) > upper_bound))

        print(f"üîç {col.upper()}:")
        print(f"   - Limites: [{lower_bound:.2f}, {upper_bound:.2f}]")
        print(f"   - Outliers: {len(outliers)} ({len(outliers)/len(df)*100:.1f}%)")

    return df


def correlation_analysis(df):
    """An√°lise de correla√ß√£o entre vari√°veis"""
    print("\nüîó AN√ÅLISE DE CORRELA√á√ÉO")
    print("=" * 50)

    # Selecionar colunas num√©ricas
    numeric_df = df.select(
        [
            "pressure",
            "temperature",
            "flow_rate",
            "vibration",
            "oil_content",
            "water_content",
            "gas_content",
        ]
    )

    # Calcular matriz de correla√ß√£o
    corr_matrix = numeric_df.corr()

    print("üìä MATRIZ DE CORRELA√á√ÉO:")
    print(corr_matrix)

    return corr_matrix


def well_comparison(df):
    """Compara√ß√£o entre diferentes po√ßos"""
    print("\nüï≥Ô∏è  COMPARA√á√ÉO ENTRE PO√áOS")
    print("=" * 50)

    well_stats = df.group_by("well_id").agg(
        [
            pl.col("pressure").mean().alias("avg_pressure"),
            pl.col("temperature").mean().alias("avg_temperature"),
            pl.col("flow_rate").mean().alias("avg_flow_rate"),
            pl.col("vibration").mean().alias("avg_vibration"),
            pl.col("oil_content").mean().alias("avg_oil_content"),
            pl.count().alias("total_readings"),
        ]
    )

    print("üìä ESTAT√çSTICAS POR PO√áO:")
    print(well_stats)

    return well_stats


def data_quality_check(df):
    """Verifica√ß√£o da qualidade dos dados"""
    print("\n‚úÖ VERIFICA√á√ÉO DA QUALIDADE DOS DADOS")
    print("=" * 50)

    # Verificar valores nulos
    null_counts = df.null_count()
    print("üîç VALORES NULOS:")
    for col, count in null_counts.items():
        if count > 0:
            print(f"   - {col}: {count} ({count/len(df)*100:.1f}%)")
        else:
            print(f"   - {col}: ‚úÖ Sem valores nulos")

    # Verificar duplicatas
    duplicates = df.duplicated().sum()
    print(f"\nüîÑ DUPLICATAS: {duplicates}")

    # Verificar tipos de dados
    print("\nüìù TIPOS DE DADOS:")
    for col, dtype in df.schema.items():
        print(f"   - {col}: {dtype}")

    return df


def export_to_gcs(df, filename="eda_results.csv"):
    """Exporta resultados para Google Cloud Storage"""
    try:
        from google.cloud import storage

        # Criar cliente do GCS
        client = storage.Client()
        bucket = client.bucket(GCS_BUCKET)

        # Salvar DataFrame como CSV
        csv_content = df.write_csv()
        blob = bucket.blob(f"eda_results/{filename}")
        blob.upload_from_string(csv_content, content_type="text/csv")

        print(f"‚úÖ Dados exportados para GCS: gs://{GCS_BUCKET}/eda_results/{filename}")
        return True

    except Exception as e:
        print(f"‚ùå Erro ao exportar para GCS: {e}")
        return False


# ============================================================================
# üéØ EXECU√á√ÉO PRINCIPAL
# ============================================================================


def main_eda_workflow():
    """Fluxo principal de EDA"""
    print("üöÄ INICIANDO EDA NO GOOGLE CLOUD PLATFORM")
    print("=" * 60)

    # 1. Configurar GCP
    if not setup_gcp_connection():
        print("‚ö†Ô∏è  Continuando com dados locais...")

    # 2. Carregar dados
    print("\nüì• CARREGANDO DADOS...")
    df = load_sample_data()
    print(f"‚úÖ Dados carregados: {len(df)} registros")

    # 3. EDA B√°sica
    df = basic_eda(df)

    # 4. An√°lise temporal
    hourly_stats = time_series_analysis(df)

    # 5. Detec√ß√£o de anomalias
    df = anomaly_detection(df)

    # 6. An√°lise de correla√ß√£o
    corr_matrix = correlation_analysis(df)

    # 7. Compara√ß√£o entre po√ßos
    well_stats = well_comparison(df)

    # 8. Verifica√ß√£o de qualidade
    df = data_quality_check(df)

    # 9. Exportar para GCS (se configurado)
    if GCP_PROJECT_ID != "your-project-id":
        export_to_gcs(df)

    print("\nüéâ EDA CONCLU√çDA COM SUCESSO!")
    print("=" * 60)

    return df, hourly_stats, corr_matrix, well_stats


# ============================================================================
# üì± INTERFACE MARIMO
# ============================================================================

# C√©lula 1: T√≠tulo e configura√ß√£o
title_cell = mo.md(
    """
# üîç EDA no Google Cloud Platform
## Petrobras Offshore Wells Anomaly Detection

Este notebook demonstra como fazer an√°lise explorat√≥ria de dados no GCP usando as melhores pr√°ticas do projeto.
"""
)

# C√©lula 2: Configura√ß√£o do GCP
gcp_config = mo.md(
    f"""
## ‚öôÔ∏è Configura√ß√£o do GCP

- **Projeto**: `{GCP_PROJECT_ID}`
- **Regi√£o**: `{GCP_REGION}`
- **Bucket**: `{GCS_BUCKET}`

Para configurar, defina as vari√°veis de ambiente:
```bash
export GCP_PROJECT_ID="seu-projeto-id"
export GCP_REGION="us-central1"
export GCS_BUCKET="seu-bucket-name"
```
"""
)


# C√©lula 3: Executar EDA
def run_eda():
    """Executa o workflow completo de EDA"""
    try:
        df, hourly_stats, corr_matrix, well_stats = main_eda_workflow()
        return f"‚úÖ EDA executado com sucesso! {len(df)} registros processados."
    except Exception as e:
        return f"‚ùå Erro na execu√ß√£o: {e}"


eda_button = mo.md("### üöÄ Executar EDA Completa")
eda_result = mo.md(run_eda)

# C√©lula 4: Resultados
results_cell = mo.md(
    """
## üìä Resultados da EDA

Os resultados incluem:
- An√°lise explorat√≥ria b√°sica
- An√°lise de s√©ries temporais
- Detec√ß√£o de anomalias
- An√°lise de correla√ß√£o
- Compara√ß√£o entre po√ßos
- Verifica√ß√£o de qualidade dos dados

Execute a c√©lula acima para ver os resultados detalhados.
"""
)

# C√©lula 5: Pr√≥ximos passos
next_steps = mo.md(
    """
## üîÆ Pr√≥ximos Passos

1. **Configurar GCP**: Defina as vari√°veis de ambiente
2. **Executar EDA**: Use o bot√£o acima para an√°lise completa
3. **Personalizar**: Modifique as fun√ß√µes para seus dados espec√≠ficos
4. **Integrar**: Use os resultados em modelos de ML
5. **Automatizar**: Configure workflows no GCP para EDA cont√≠nua

## üìö Recursos Adicionais

- [Google Cloud Storage](https://cloud.google.com/storage)
- [BigQuery](https://cloud.google.com/bigquery)
- [Vertex AI](https://cloud.google.com/vertex-ai)
- [Polars Documentation](https://pola.rs/)
- [Marimo Documentation](https://marimo.io/)
"""
)

# Criar aplica√ß√£o Marimo
app = mo.App(
    title="GCP EDA Example",
    cells=[title_cell, gcp_config, eda_button, eda_result, results_cell, next_steps],
)

if __name__ == "__main__":
    app.run()
