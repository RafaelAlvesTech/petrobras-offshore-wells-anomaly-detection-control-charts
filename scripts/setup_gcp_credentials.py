#!/usr/bin/env python3
"""
Secure GCP Credentials Setup Script
This script helps set up GCP credentials securely for local development.
"""

import os
import sys
from pathlib import Path


def main():
    """Main setup function."""
    print("üîê Secure GCP Credentials Setup")
    print("=" * 40)

    # Check if .env.local already exists
    env_file = Path(".env.local")
    if env_file.exists():
        response = input("üìù .env.local already exists. Overwrite? (y/N): ")
        if response.lower() != "y":
            print("Setup cancelled.")
            return

    # Collect configuration
    config = {}

    print("\nüìã Please provide your GCP configuration:")

    # Required fields
    config["GCP_PROJECT_ID"] = input("GCP Project ID: ").strip()
    if not config["GCP_PROJECT_ID"]:
        print("‚ùå Project ID is required!")
        sys.exit(1)

    config["GCP_BUCKET_NAME"] = input("GCS Bucket Name: ").strip()
    if not config["GCP_BUCKET_NAME"]:
        print("‚ùå Bucket name is required!")
        sys.exit(1)

    # Optional fields with defaults
    config["GCP_REGION"] = input("GCP Region [us-central1]: ").strip() or "us-central1"
    config["GCP_ZONE"] = input("GCP Zone [us-central1-a]: ").strip() or "us-central1-a"
    config["VERTEX_AI_LOCATION"] = (
        input("Vertex AI Location [us-central1]: ").strip() or "us-central1"
    )

    # Service Account Key Path
    print("\nüîë Service Account Authentication:")
    print("1. Use Application Default Credentials (recommended for local dev)")
    print("2. Specify service account key file path")

    auth_choice = input("Choose authentication method (1/2) [1]: ").strip() or "1"

    if auth_choice == "2":
        sa_path = input("Service Account Key Path: ").strip()
        if sa_path and Path(sa_path).exists():
            config["GOOGLE_APPLICATION_CREDENTIALS"] = sa_path
        elif sa_path:
            print(f"‚ö†Ô∏è  Warning: File not found at {sa_path}")
            config["GOOGLE_APPLICATION_CREDENTIALS"] = sa_path

    # Optional configurations
    config["MLFLOW_TRACKING_URI"] = (
        input("MLflow Tracking URI [http://localhost:5000]: ").strip()
        or "http://localhost:5000"
    )
    config["GCP_ENABLE_LOGGING"] = (
        input("Enable GCP Logging [true]: ").strip() or "true"
    )
    config["GCP_LOG_LEVEL"] = input("Log Level [INFO]: ").strip() or "INFO"

    # Write configuration file
    try:
        with open(env_file, "w") as f:
            f.write("# Google Cloud Platform Configuration\n")
            f.write("# Generated by setup_gcp_credentials.py\n")
            f.write("# NEVER commit this file to the repository!\n\n")

            for key, value in config.items():
                if value:  # Only write non-empty values
                    f.write(f"{key}={value}\n")

        print(f"\n‚úÖ Configuration saved to {env_file}")
        print("\nüîí Security reminders:")
        print("- This file is automatically ignored by git")
        print("- Never commit credentials to the repository")
        print("- Use GitHub Secrets for CI/CD environments")

        # Test configuration
        print("\nüß™ Testing configuration...")
        test_config()

    except Exception as e:
        print(f"‚ùå Error saving configuration: {e}")
        sys.exit(1)


def test_config():
    """Test the GCP configuration."""
    try:
        # Import and test configuration
        sys.path.append("src")
        from config.gcp_env_config import GCPEnvConfig

        # Load environment file
        load_env_file()

        config = GCPEnvConfig()
        print(f"‚úÖ Project ID: {config.project_id}")
        print(f"‚úÖ Region: {config.region}")
        print(f"‚úÖ Bucket: {config.bucket_name}")

        if config.service_account_path:
            print(f"‚úÖ Service Account: {config.service_account_path}")
        else:
            print("‚úÖ Using Application Default Credentials")

        print("\nüéâ Configuration test passed!")

    except Exception as e:
        print(f"‚ö†Ô∏è  Configuration test failed: {e}")
        print("Please check your settings and try again.")


def load_env_file():
    """Load environment variables from .env.local file."""
    env_file = Path(".env.local")
    if env_file.exists():
        with open(env_file) as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#") and "=" in line:
                    key, value = line.split("=", 1)
                    os.environ[key.strip()] = value.strip()


if __name__ == "__main__":
    main()
