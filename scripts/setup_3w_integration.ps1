# Script de configura√ß√£o para integra√ß√£o com Dataset 3W da Petrobras (Windows)
# Este script automatiza a configura√ß√£o da integra√ß√£o com o 3W no Windows

param(
    [switch]$Force
)

# Configura√ß√µes de erro
$ErrorActionPreference = "Stop"

# Fun√ß√£o para logging
function Write-Log {
    param(
        [string]$Message,
        [string]$Level = "INFO"
    )

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $color = switch ($Level) {
        "INFO" { "Green" }
        "WARN" { "Yellow" }
        "ERROR" { "Red" }
        "INFO_BLUE" { "Blue" }
        default { "White" }
    }

    Write-Host "[$timestamp] [$Level] $Message" -ForegroundColor $color
}

function Write-Info {
    param([string]$Message)
    Write-Log $Message "INFO"
}

function Write-Warn {
    param([string]$Message)
    Write-Log $Message "WARN"
}

function Write-Error {
    param([string]$Message)
    Write-Log $Message "ERROR"
}

function Write-InfoBlue {
    param([string]$Message)
    Write-Log $Message "INFO_BLUE"
}

# Verifica se estamos no diret√≥rio raiz do projeto
if (-not (Test-Path "pyproject.toml")) {
    Write-Error "Execute este script no diret√≥rio raiz do projeto"
    exit 1
}

Write-Info "üöÄ Iniciando configura√ß√£o da integra√ß√£o 3W..."

# 1. Verificar se o diret√≥rio 3W j√° existe
if (Test-Path "3W") {
    Write-Warn "Diret√≥rio 3W j√° existe. Atualizando..."
    Set-Location "3W"
    git pull origin main
    Set-Location ".."
} else {
    Write-Info "üì• Clonando reposit√≥rio 3W..."
    git clone https://github.com/petrobras/3W.git
}

# 2. Verificar se o git est√° dispon√≠vel
try {
    $null = git --version
    Write-Info "‚úÖ Git encontrado"
} catch {
    Write-Error "Git n√£o est√° instalado. Instale o Git primeiro."
    exit 1
}

# 3. Verificar se o Python est√° dispon√≠vel
try {
    $null = python --version
    Write-Info "‚úÖ Python encontrado"
} catch {
    Write-Error "Python n√£o est√° instalado. Instale o Python 3.11+ primeiro."
    exit 1
}

# 4. Verificar se o uv est√° dispon√≠vel
try {
    $null = uv --version
    Write-Info "‚úÖ uv encontrado"
} catch {
    Write-Warn "uv n√£o est√° instalado. Instalando..."
    # Instala√ß√£o do uv no Windows
    Invoke-WebRequest -Uri "https://astral.sh/uv/install.ps1" -OutFile "install_uv.ps1"
    & "install_uv.ps1"
    Remove-Item "install_uv.ps1"

    # Recarrega o PATH
    $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
}

# 5. Criar diret√≥rio de logs se n√£o existir
if (-not (Test-Path "logs")) {
    Write-Info "üìÅ Criando diret√≥rio de logs..."
    New-Item -ItemType Directory -Path "logs" -Force | Out-Null
}

# 6. Criar diret√≥rio de configura√ß√µes se n√£o existir
if (-not (Test-Path "config")) {
    Write-Info "üìÅ Criando diret√≥rio de configura√ß√µes..."
    New-Item -ItemType Directory -Path "config" -Force | Out-Null
}

# 7. Verificar se o ambiente virtual existe
if (-not (Test-Path ".venv")) {
    Write-Info "üêç Criando ambiente virtual..."
    uv venv
}

# 8. Ativar ambiente virtual
Write-Info "üîß Ativando ambiente virtual..."
& ".venv\Scripts\Activate.ps1"

# 9. Sincronizar depend√™ncias
Write-Info "üì¶ Sincronizando depend√™ncias..."
uv sync

# 10. Verificar se as depend√™ncias do 3W est√£o instaladas
Write-Info "üîç Verificando depend√™ncias do 3W..."
python -c "
import sys
try:
    import pyarrow
    import h5py
    import tslearn
    import ydata_profiling
    import numba
    import missingno
    import alive_progress
    import natsort
    import plotly
    import pydantic
    print('‚úÖ Todas as depend√™ncias do 3W est√£o instaladas')
except ImportError as e:
    print(f'‚ùå Depend√™ncia n√£o encontrada: {e}')
    sys.exit(1)
"

# 11. Testar a integra√ß√£o
Write-Info "üß™ Testando integra√ß√£o..."
python -c "
import sys
from pathlib import Path

# Adiciona o caminho do projeto
project_root = Path.cwd()
sys.path.insert(0, str(project_root))

try:
    from src.data.threew_dataset import is_threew_available, get_threew_info
    from src.config.threew_config import get_threew_dataset_config

    if is_threew_available():
        info = get_threew_info()
        print(f'‚úÖ Integra√ß√£o 3W funcionando - Vers√£o: {info.get(\"version\", \"N/A\")}')

        config = get_threew_dataset_config()
        print(f'‚úÖ Configura√ß√µes carregadas - Problemas: {len(config.get(\"problems\", []))}')
    else:
        print('‚ö†Ô∏è Dataset 3W n√£o dispon√≠vel (verificar se o diret√≥rio 3W est√° presente)')

except Exception as e:
    print(f'‚ùå Erro na integra√ß√£o: {e}')
    sys.exit(1)
"

# 12. Criar arquivo de configura√ß√£o padr√£o se n√£o existir
if (-not (Test-Path "config/3w_config.yaml")) {
    Write-Info "‚öôÔ∏è Criando arquivo de configura√ß√£o padr√£o..."
    @"
# Configura√ß√£o para integra√ß√£o com o Dataset 3W da Petrobras
dataset:
  name: "3W"
  version: "1.1.0"
  description: "Dataset 3W da Petrobras para detec√ß√£o de anomalias em po√ßos offshore"

  paths:
    toolkit: "3W/toolkit"
    dataset: "3W/dataset"
    folds: "3W/dataset/folds"
    problems: "3W/problems"
    overviews: "3W/overviews"

  loading:
    use_cache: true
    cache_size: 1000
    normalize_data: true
    test_size: 0.2
    random_state: 42

  preprocessing:
    imputation_strategy: "mean"
    scaling_method: "robust"
    feature_selection_method: "mutual_info"
    n_features: null
    pca_components: null

  rolling_window:
    window_size: 100
    step_size: 1
    padding: "same"

problems:
  - name: "01_binary_classifier_of_spurious_closure_of_dhsv"
    description: "Classificador bin√°rio para fechamento esp√∫rio de DHSV"
    type: "classification"
    target_column: 0

experiments:
  default:
    n_folds: 5
    cross_validation: true
    hyperparameter_optimization: true
    optimization_trials: 100

logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file: "logs/3w_integration.log"

cache:
  enabled: true
  max_size: 1000
  ttl: 3600
  backend: "memory"

validation:
  check_data_integrity: true
  validate_schema: true
  check_missing_values: true
  outlier_detection: true

performance:
  use_multiprocessing: true
  n_jobs: -1
  batch_size: 1000
  memory_efficient: true

export:
  formats: ["parquet", "csv", "numpy"]
  compression: "brotli"
  include_metadata: true
  save_preprocessing_pipeline: true
"@ | Out-File -FilePath "config/3w_config.yaml" -Encoding UTF8
}

# 13. Verificar se o notebook de exemplo existe
if (-not (Test-Path "notebooks/3W_integration_example.py")) {
    Write-Warn "Notebook de exemplo n√£o encontrado. Verifique se foi criado corretamente."
} else {
    Write-Info "üìì Notebook de exemplo encontrado"
}

# 14. Testar carregamento de dados
Write-Info "üìä Testando carregamento de dados..."
python -c "
import sys
from pathlib import Path

# Adiciona o caminho do projeto
project_root = Path.cwd()
sys.path.insert(0, str(project_root))

try:
    from src.data.data_loader import create_data_loader

    # Tenta criar o carregador
    loader = create_data_loader(use_threew=True, cache_data=True)
    print('‚úÖ Carregador de dados criado com sucesso')

    # Lista problemas dispon√≠veis
    problems = loader.list_available_problems()
    print(f'‚úÖ Problemas dispon√≠veis: {problems}')

except Exception as e:
    print(f'‚ö†Ô∏è Aviso no carregador de dados: {e}')
"

# 15. Verificar estrutura do projeto
Write-Info "üìÅ Verificando estrutura do projeto..."
$requiredDirs = @("src/data", "src/config", "notebooks", "config", "logs")
foreach ($dir in $requiredDirs) {
    if (Test-Path $dir) {
        Write-Info "‚úÖ Diret√≥rio $dir existe"
    } else {
        Write-Warn "‚ö†Ô∏è Diret√≥rio $dir n√£o encontrado"
    }
}

# 16. Resumo final
Write-Info "üéâ Configura√ß√£o da integra√ß√£o 3W conclu√≠da!"
Write-Host ""
Write-InfoBlue "üìã Resumo da configura√ß√£o:"
Write-Host "   ‚Ä¢ Reposit√≥rio 3W: $(if (Test-Path "3W") { "‚úÖ Clonado" } else { "‚ùå N√£o encontrado" })"
Write-Host "   ‚Ä¢ Ambiente virtual: $(if (Test-Path ".venv") { "‚úÖ Criado" } else { "‚ùå N√£o encontrado" })"
Write-Host "   ‚Ä¢ Depend√™ncias: $(if (Test-Path ".venv") { "‚úÖ Sincronizadas" } else { "‚ùå N√£o sincronizadas" })"
Write-Host "   ‚Ä¢ Configura√ß√µes: $(if (Test-Path "config/3w_config.yaml") { "‚úÖ Criadas" } else { "‚ùå N√£o criadas" })"
Write-Host "   ‚Ä¢ Logs: $(if (Test-Path "logs") { "‚úÖ Diret√≥rio criado" } else { "‚ùå N√£o criado" })"
Write-Host ""

# 17. Instru√ß√µes de uso
Write-InfoBlue "üöÄ Para usar a integra√ß√£o 3W:"
Write-Host ""
Write-Host "1. Execute o notebook de exemplo:"
Write-Host "   marimo edit notebooks/3W_integration_example.py"
Write-Host ""
Write-Host "2. Ou use no seu c√≥digo Python:"
Write-Host "   from src.data.threew_dataset import is_threew_available"
Write-Host "   from src.data.data_loader import create_data_loader"
Write-Host ""
Write-Host "3. Verifique a documenta√ß√£o completa em: docs/3W_INTEGRATION.md"
Write-Host ""

# 18. Verificar se h√° problemas
if ((Test-Path "3W") -and (Test-Path ".venv") -and (Test-Path "config/3w_config.yaml")) {
    Write-Info "üéØ Integra√ß√£o 3W configurada com sucesso!"
    Write-Info "üìö Consulte a documenta√ß√£o para come√ßar a usar: docs/3W_INTEGRATION.md"
} else {
    Write-Warn "‚ö†Ô∏è Alguns componentes podem n√£o ter sido configurados corretamente."
    Write-Warn "Verifique os logs acima e execute o script novamente se necess√°rio."
}

Write-Host ""
Write-Info "‚ú® Configura√ß√£o conclu√≠da! Boa sorte com sua pesquisa em detec√ß√£o de anomalias!"
