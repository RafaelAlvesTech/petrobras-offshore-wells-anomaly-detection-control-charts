# =============================================================================
# üõ¢Ô∏è CONFIGURA√á√ïES ESPEC√çFICAS DO PROJETO PETROBRAS
# =============================================================================
# Este arquivo cont√©m configura√ß√µes espec√≠ficas do projeto que podem ser
# personalizadas sem modificar o .zshrc principal
# =============================================================================

# =============================================================================
# üîß CONFIGURA√á√ïES DE DESENVOLVIMENTO
# =============================================================================

# Configura√ß√µes espec√≠ficas do ambiente de desenvolvimento
export DEV_MODE=true
export DEBUG_MODE=false
export VERBOSE_LOGGING=false

# Configura√ß√µes de performance
export OMP_NUM_THREADS=4
export MKL_NUM_THREADS=4
export NUMEXPR_NUM_THREADS=4

# Configura√ß√µes de mem√≥ria
export PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
export CUDA_LAUNCH_BLOCKING=0

# =============================================================================
# üìä CONFIGURA√á√ïES DE DADOS
# =============================================================================

# Configura√ß√µes espec√≠ficas dos dados da Petrobras
export PETROBRAS_DATA_FORMAT="parquet"
export PETROBRAS_TIME_SERIES_LENGTH=1000
export PETROBRAS_NUM_FEATURES=50
export PETROBRAS_ANOMALY_THRESHOLD=0.1

# Configura√ß√µes de processamento
export BATCH_SIZE=32
export NUM_WORKERS=4
export PREFETCH_FACTOR=2

# =============================================================================
# ü§ñ CONFIGURA√á√ïES DE MODELOS
# =============================================================================

# Configura√ß√µes espec√≠ficas dos modelos de detec√ß√£o de anomalias
export ANOMALY_MODEL_TYPE="TranAD"
export MODEL_CHECKPOINT_DIR="${MODELS_DIR}/checkpoints"
export MODEL_ARTIFACTS_DIR="${MODELS_DIR}/artifacts"

# Configura√ß√µes de treinamento
export TRAINING_DEVICE="cuda"
export MIXED_PRECISION=true
export GRADIENT_ACCUMULATION_STEPS=1

# Configura√ß√µes de valida√ß√£o
export VALIDATION_METRIC="AUC-PR"
export EARLY_STOPPING_PATIENCE=10
export MODEL_SELECTION_METRIC="F1-Score"

# =============================================================================
# üîç CONFIGURA√á√ïES DE MONITORAMENTO
# =============================================================================

# Configura√ß√µes de logging espec√≠ficas
export LOG_FORMAT="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
export LOG_FILE="${LOGS_DIR}/petrobras_anomaly_detection.log"

# Configura√ß√µes de m√©tricas
export METRICS_UPDATE_INTERVAL=100
export METRICS_LOG_INTERVAL=1000

# =============================================================================
# üåê CONFIGURA√á√ïES DE CLOUD (se aplic√°vel)
# =============================================================================

# Configura√ß√µes do Google Cloud (se usando)
if [ -f "${PROJECT_ROOT}/.env" ]; then
    source "${PROJECT_ROOT}/.env"
fi

# Configura√ß√µes do AWS (se usando)
if [ -f "${PROJECT_ROOT}/aws-config.yaml" ]; then
    export AWS_CONFIG_FILE="${PROJECT_ROOT}/aws-config.yaml"
fi

# =============================================================================
# üéØ ALIASES ESPEC√çFICOS DO PROJETO
# =============================================================================

# Aliases para an√°lise de dados
alias analyze-data='python src/analysis/data_analysis.py'
alias preprocess-data='python src/preprocessing/data_preprocessing.py'
alias feature-engineering='python src/feature_engineering/feature_extraction.py'

# Aliases para treinamento de modelos
alias train-tranad='python src/models/tranad/train.py'
alias train-lstm-vae='python src/models/lstm_vae/train.py'
alias train-usad='python src/models/usad/train.py'
alias train-ecod='python src/models/ecod/train.py'

# Aliases para avalia√ß√£o
alias evaluate-models='python src/evaluation/model_evaluation.py'
alias compare-models='python src/evaluation/model_comparison.py'
alias generate-report='python src/reporting/generate_report.py'

# Aliases para visualiza√ß√£o
alias plot-results='python src/visualization/plot_results.py'
alias plot-anomalies='python src/visualization/plot_anomalies.py'
alias plot-metrics='python src/visualization/plot_metrics.py'

# Aliases para deployment
alias deploy-model='python src/deployment/deploy_model.py'
alias test-deployment='python src/deployment/test_deployment.py'

# =============================================================================
# üöÄ FUN√á√ïES ESPEC√çFICAS DO PROJETO
# =============================================================================

# Fun√ß√£o para executar pipeline completo
run_pipeline() {
    echo "üîÑ Executando pipeline completo de detec√ß√£o de anomalias..."

    echo "üìä 1. An√°lise de dados..."
    analyze-data

    echo "üîß 2. Pr√©-processamento..."
    preprocess-data

    echo "‚öôÔ∏è 3. Engenharia de features..."
    feature-engineering

    echo "ü§ñ 4. Treinamento de modelos..."
    train-tranad
    train-lstm-vae
    train-usad
    train-ecod

    echo "üìà 5. Avalia√ß√£o de modelos..."
    evaluate-models

    echo "üìä 6. Compara√ß√£o de modelos..."
    compare-models

    echo "üìã 7. Gera√ß√£o de relat√≥rio..."
    generate-report

    echo "‚úÖ Pipeline conclu√≠do!"
}

# Fun√ß√£o para executar experimento
run_experiment() {
    local experiment_name=$1
    local model_type=${2:-"TranAD"}

    if [ -z "$experiment_name" ]; then
        echo "‚ùå Nome do experimento √© obrigat√≥rio"
        echo "Uso: run_experiment <nome_do_experimento> [tipo_do_modelo]"
        return 1
    fi

    echo "üß™ Executando experimento: $experiment_name"
    echo "ü§ñ Modelo: $model_type"

    # Criar diret√≥rio do experimento
    local exp_dir="${LOGS_DIR}/experiments/${experiment_name}"
    mkdir -p "$exp_dir"

    # Executar treinamento
    case $model_type in
        "TranAD")
            train-tranad --experiment_name "$experiment_name" --output_dir "$exp_dir"
            ;;
        "LSTM-VAE")
            train-lstm-vae --experiment_name "$experiment_name" --output_dir "$exp_dir"
            ;;
        "USAD")
            train-usad --experiment_name "$experiment_name" --output_dir "$exp_dir"
            ;;
        "ECOD")
            train-ecod --experiment_name "$experiment_name" --output_dir "$exp_dir"
            ;;
        *)
            echo "‚ùå Tipo de modelo n√£o suportado: $model_type"
            return 1
            ;;
    esac

    echo "‚úÖ Experimento $experiment_name conclu√≠do!"
}

# Fun√ß√£o para monitorar treinamento
monitor_training() {
    echo "üìä Monitorando treinamento..."
    echo "üìà TensorBoard: http://localhost:6006"
    echo "üìä MLflow UI: http://localhost:5000"

    # Abrir TensorBoard em background
    tensorboard &

    # Abrir MLflow UI em background
    mlflow-ui &

    echo "‚úÖ Monitoramento iniciado!"
}

# Fun√ß√£o para limpar experimentos antigos
cleanup_experiments() {
    local days=${1:-30}
    echo "üßπ Limpando experimentos mais antigos que $days dias..."

    find "${LOGS_DIR}/experiments" -type d -mtime +$days -exec rm -rf {} + 2>/dev/null
    find "${MODELS_DIR}/checkpoints" -type f -mtime +$days -delete 2>/dev/null

    echo "‚úÖ Limpeza conclu√≠da!"
}

# Fun√ß√£o para backup de experimentos
backup_experiments() {
    local backup_name="experiments_backup_$(date +%Y%m%d_%H%M%S)"
    echo "üíæ Criando backup dos experimentos: $backup_name"

    tar -czf "${backup_name}.tar.gz" \
        "${LOGS_DIR}/experiments" \
        "${MODELS_DIR}/checkpoints" \
        "${MODELS_DIR}/artifacts"

    echo "‚úÖ Backup criado: ${backup_name}.tar.gz"
}

# =============================================================================
# üìã CONFIGURA√á√ïES DE QUALIDADE DE C√ìDIGO
# =============================================================================

# Fun√ß√£o para verificar qualidade do c√≥digo
check_code_quality() {
    echo "üîç Verificando qualidade do c√≥digo..."

    echo "üìù Verificando formata√ß√£o..."
    ruff format --check src/ tests/

    echo "üîç Verificando linting..."
    ruff check src/ tests/

    echo "üîí Verificando seguran√ßa..."
    bandit -r src/

    echo "üìä Verificando tipos..."
    mypy src/

    echo "‚úÖ Verifica√ß√£o de qualidade conclu√≠da!"
}

# Fun√ß√£o para corrigir qualidade do c√≥digo
fix_code_quality() {
    echo "üîß Corrigindo qualidade do c√≥digo..."

    echo "üìù Formatando c√≥digo..."
    ruff format src/ tests/

    echo "üîç Corrigindo linting..."
    ruff check --fix src/ tests/

    echo "‚úÖ Corre√ß√µes aplicadas!"
}

# =============================================================================
# üéØ CONFIGURA√á√ïES FINAIS
# =============================================================================

# Mensagem de carregamento
echo "üõ¢Ô∏è  Configura√ß√µes espec√≠ficas do projeto Petrobras carregadas!"

# Verificar se todas as depend√™ncias est√£o instaladas
check_dependencies() {
    echo "üîç Verificando depend√™ncias..."

    local missing_deps=()

    # Verificar Python
    if ! command -v python &> /dev/null; then
        missing_deps+=("python")
    fi

    # Verificar uv
    if ! command -v uv &> /dev/null; then
        missing_deps+=("uv")
    fi

    # Verificar Jupyter
    if ! command -v jupyter &> /dev/null; then
        missing_deps+=("jupyter")
    fi

    # Verificar MLflow
    if ! command -v mlflow &> /dev/null; then
        missing_deps+=("mlflow")
    fi

    if [ ${#missing_deps[@]} -eq 0 ]; then
        echo "‚úÖ Todas as depend√™ncias est√£o instaladas!"
    else
        echo "‚ùå Depend√™ncias faltando: ${missing_deps[*]}"
        echo "üí° Execute: uv sync para instalar as depend√™ncias"
    fi
}

# Executar verifica√ß√£o de depend√™ncias
check_dependencies
