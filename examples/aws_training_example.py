#!/usr/bin/env python3
"""
Exemplo de Uso AWS para Petrobras Offshore Wells Anomaly Detection

Este script demonstra como usar a integra√ß√£o AWS para treinar modelos
de detec√ß√£o de anomalias na cloud.
"""

import logging
import sys
from pathlib import Path

# Adiciona o diret√≥rio src ao path
sys.path.append(str(Path(__file__).parent.parent / "src"))

from aws.aws_config_manager import AWSConfigManager
from aws.aws_training import AWSTrainingManager

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def main():
    """Fun√ß√£o principal do exemplo."""
    print("üöÄ Exemplo de Uso AWS para Petrobras Anomaly Detection")
    print("=" * 60)

    try:
        # 1. Inicializar gerenciador de configura√ß√£o
        print("\n1Ô∏è‚É£ Inicializando gerenciador de configura√ß√£o AWS...")
        config_manager = AWSConfigManager()

        # Verificar status da configura√ß√£o
        config_manager.print_status()

        # 2. Criar bucket S3 se n√£o existir
        print("\n2Ô∏è‚É£ Configurando bucket S3...")
        if config_manager.create_s3_bucket():
            print("‚úÖ Bucket S3 configurado com sucesso")
        else:
            print("‚ùå Falha na configura√ß√£o do bucket S3")
            return

        # Configurar estrutura de pastas
        if config_manager.setup_s3_structure():
            print("‚úÖ Estrutura S3 configurada com sucesso")
        else:
            print("‚ùå Falha na configura√ß√£o da estrutura S3")
            return

        # 3. Inicializar gerenciador de treinamento
        print("\n3Ô∏è‚É£ Inicializando gerenciador de treinamento...")
        training_manager = AWSTrainingManager()

        # 4. Exemplo de configura√ß√£o para LSTM-VAE
        print("\n4Ô∏è‚É£ Configurando treinamento para LSTM-VAE...")
        lstm_config = training_manager.get_training_config("lstm_vae")

        if lstm_config:
            print("‚úÖ Configura√ß√£o LSTM-VAE obtida:")
            print(f"   ‚Ä¢ Instance Type: {lstm_config.instance_type}")
            print(f"   ‚Ä¢ Batch Size: {lstm_config.hyperparameters.get('batch_size')}")
            print(
                f"   ‚Ä¢ Learning Rate: {lstm_config.hyperparameters.get('learning_rate')}"
            )
            print(f"   ‚Ä¢ Epochs: {lstm_config.hyperparameters.get('epochs')}")

            # 5. Estimativa de custo
            print("\n5Ô∏è‚É£ Estimativa de custo:")
            cost_estimate = training_manager.get_cost_estimate(lstm_config)
            if cost_estimate:
                print(
                    f"   ‚Ä¢ Custo por hora: ${cost_estimate.get('hourly_rate', 0):.2f}"
                )
                print(
                    f"   ‚Ä¢ Horas estimadas: {cost_estimate.get('estimated_hours', 0):.1f}"
                )
                print(
                    f"   ‚Ä¢ Custo total estimado: ${cost_estimate.get('total_cost', 0):.2f}"
                )
            else:
                print("   ‚ö†Ô∏è N√£o foi poss√≠vel estimar o custo")

            # 6. Listar jobs existentes
            print("\n6Ô∏è‚É£ Jobs de treinamento existentes:")
            try:
                jobs = training_manager.list_training_jobs()
                if jobs:
                    for job in jobs[:5]:  # Mostra apenas os 5 mais recentes
                        print(f"   ‚Ä¢ {job['job_name']} - {job['status']}")
                else:
                    print("   üìù Nenhum job de treinamento encontrado")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao listar jobs: {e}")

            # 7. Exemplo de cria√ß√£o de job (comentado para seguran√ßa)
            print("\n7Ô∏è‚É£ Exemplo de cria√ß√£o de job de treinamento:")
            print("   # Para criar um job de treinamento, descomente as linhas abaixo:")
            print("   # job_name = training_manager.create_training_job(lstm_config)")
            print("   # print(f'Job criado: {job_name}')")

            # 8. Exemplo de tuning de hiperpar√¢metros
            print("\n8Ô∏è‚É£ Exemplo de tuning de hiperpar√¢metros:")
            print("   # Para criar um job de tuning, descomente as linhas abaixo:")
            print(
                "   # tuning_job_name = training_manager.create_hyperparameter_tuning_job(lstm_config)"
            )
            print("   # print(f'Job de tuning criado: {tuning_job_name}')")

        else:
            print("‚ùå Falha ao obter configura√ß√£o de treinamento")
            return

        # 9. Pr√≥ximos passos
        print("\n9Ô∏è‚É£ Pr√≥ximos passos:")
        print("   üìö Leia a documenta√ß√£o: docs/AWS_SETUP.md")
        print("   üîß Configure suas credenciais AWS no arquivo .env.aws")
        print("   üöÄ Execute: python src/aws/aws_training.py")
        print("   üí∞ Configure alertas de custo no CloudWatch")
        print("   üîí Revise as configura√ß√µes de seguran√ßa IAM")

        print("\nüéâ Exemplo conclu√≠do com sucesso!")

    except Exception as e:
        logger.error(f"Erro durante a execu√ß√£o: {e}")
        print(f"\n‚ùå Erro: {e}")
        print("\nüîß Verifique:")
        print("   ‚Ä¢ Se as credenciais AWS est√£o configuradas")
        print("   ‚Ä¢ Se o arquivo aws-config.yaml existe")
        print("   ‚Ä¢ Se as depend√™ncias est√£o instaladas")
        print("   ‚Ä¢ Se voc√™ tem permiss√µes adequadas na AWS")


def demo_hyperparameter_tuning():
    """Demonstra√ß√£o de tuning de hiperpar√¢metros."""
    print("\nüîß Demonstra√ß√£o de Tuning de Hiperpar√¢metros")
    print("=" * 50)

    try:
        training_manager = AWSTrainingManager()

        # Configura√ß√£o para TranAD
        tranad_config = training_manager.get_training_config("tranad")

        if tranad_config:
            print("‚úÖ Configura√ß√£o TranAD obtida:")
            print(f"   ‚Ä¢ Instance Type: {tranad_config.instance_type}")
            print(f"   ‚Ä¢ Batch Size: {tranad_config.hyperparameters.get('batch_size')}")
            print(
                f"   ‚Ä¢ Learning Rate: {tranad_config.hyperparameters.get('learning_rate')}"
            )

            # Espa√ßo de busca
            search_space = training_manager.get_hyperparameter_search_space("tranad")
            if search_space:
                print("\nüîç Espa√ßo de busca de hiperpar√¢metros:")
                for param, config in search_space.items():
                    if config.get("type") == "Continuous":
                        print(
                            f"   ‚Ä¢ {param}: {config['min_value']} - {config['max_value']}"
                        )
                    elif config.get("type") == "Categorical":
                        print(f"   ‚Ä¢ {param}: {config['values']}")

            # Estimativa de custo
            cost_estimate = training_manager.get_cost_estimate(tranad_config)
            if cost_estimate:
                print(
                    f"\nüí∞ Custo estimado para tuning: ${cost_estimate.get('total_cost', 0):.2f}"
                )

    except Exception as e:
        logger.error(f"Erro na demonstra√ß√£o de tuning: {e}")


def demo_cost_optimization():
    """Demonstra√ß√£o de otimiza√ß√£o de custos."""
    print("\nüí∞ Demonstra√ß√£o de Otimiza√ß√£o de Custos")
    print("=" * 50)

    try:
        config_manager = AWSConfigManager()

        # Criar alarme de custo
        print("üîî Configurando alarme de custo...")
        if config_manager.create_cost_alarm(100, "MONTHLY"):
            print("‚úÖ Alarme de custo mensal criado ($100)")
        else:
            print("‚ö†Ô∏è Falha ao criar alarme de custo")

        # Configura√ß√µes de otimiza√ß√£o
        cost_config = config_manager.config.get("cost_optimization", {})
        print("\n‚öôÔ∏è Configura√ß√µes de otimiza√ß√£o:")
        print(
            f"   ‚Ä¢ Spot Instances: {'‚úÖ Habilitado' if cost_config.get('spot_instances', {}).get('enabled') else '‚ùå Desabilitado'}"
        )
        print(
            f"   ‚Ä¢ Reserved Instances: {'‚úÖ Habilitado' if cost_config.get('reserved_instances', {}).get('enabled') else '‚ùå Desabilitado'}"
        )
        print(
            f"   ‚Ä¢ Savings Plans: {'‚úÖ Habilitado' if cost_config.get('savings_plans', {}).get('enabled') else '‚ùå Desabilitado'}"
        )

        # Alertas de custo
        alerts_config = cost_config.get("cost_alerts", {})
        if alerts_config.get("enabled"):
            print(f"   ‚Ä¢ Or√ßamento mensal: ${alerts_config.get('monthly_budget', 0)}")
            print(f"   ‚Ä¢ Or√ßamento di√°rio: ${alerts_config.get('daily_budget', 0)}")

    except Exception as e:
        logger.error(f"Erro na demonstra√ß√£o de otimiza√ß√£o de custos: {e}")


if __name__ == "__main__":
    # Executar exemplo principal
    main()

    # Executar demonstra√ß√µes adicionais
    demo_hyperparameter_tuning()
    demo_cost_optimization()

    print("\n" + "=" * 60)
    print("üéØ Para mais informa√ß√µes, consulte:")
    print("   üìö docs/AWS_SETUP.md")
    print("   üöÄ scripts/setup_aws.sh")
    print("   üîß src/aws/aws_config_manager.py")
    print("   üöÄ src/aws/aws_training.py")
    print("=" * 60)
